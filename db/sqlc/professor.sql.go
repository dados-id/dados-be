// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: professor.sql

package db

import (
	"context"
	"database/sql"
)

const countListProfessors = `-- name: CountListProfessors :one
SELECT COUNT(*)::int FROM professors
`

func (q *Queries) CountListProfessors(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, countListProfessors)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countListProfessorsByFaculty = `-- name: CountListProfessorsByFaculty :one
SELECT COUNT(*)::int FROM professors
  WHERE faculty_id = $1
`

func (q *Queries) CountListProfessorsByFaculty(ctx context.Context, facultyID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, countListProfessorsByFaculty, facultyID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countListProfessorsByFacultyAndSchool = `-- name: CountListProfessorsByFacultyAndSchool :one
SELECT COUNT(*)::int FROM professors
  WHERE faculty_id = $1 AND school_id = $2
`

type CountListProfessorsByFacultyAndSchoolParams struct {
	FacultyID int32 `json:"facultyId"`
	SchoolID  int32 `json:"schoolId"`
}

func (q *Queries) CountListProfessorsByFacultyAndSchool(ctx context.Context, arg CountListProfessorsByFacultyAndSchoolParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, countListProfessorsByFacultyAndSchool, arg.FacultyID, arg.SchoolID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countListProfessorsByName = `-- name: CountListProfessorsByName :one
SELECT COUNT(*)::int FROM professors P
 WHERE LOWER(P.first_name) LIKE LOWER($1::varchar)
 OR LOWER(P.last_name) LIKE LOWER($1::varchar)
 OR LOWER(concat(P.first_name, ' ', P.last_name)) LIKE LOWER($1::varchar)
`

func (q *Queries) CountListProfessorsByName(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, countListProfessorsByName, name)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countListProfessorsBySchool = `-- name: CountListProfessorsBySchool :one
SELECT COUNT(*)::int FROM professors
  WHERE school_id = $1
`

func (q *Queries) CountListProfessorsBySchool(ctx context.Context, schoolID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, countListProfessorsBySchool, schoolID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countListProfessorsBySchoolAndName = `-- name: CountListProfessorsBySchoolAndName :one
SELECT COUNT(*)::int FROM professors P
  WHERE P.school_id = $1 AND (
  LOWER(P.first_name) LIKE LOWER($2::varchar)
  OR LOWER(P.last_name) LIKE LOWER($2::varchar)
  OR LOWER(concat(P.first_name, ' ', P.last_name)) LIKE LOWER($2::varchar)
)
`

type CountListProfessorsBySchoolAndNameParams struct {
	SchoolID int32  `json:"schoolId"`
	Name     string `json:"name"`
}

func (q *Queries) CountListProfessorsBySchoolAndName(ctx context.Context, arg CountListProfessorsBySchoolAndNameParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, countListProfessorsBySchoolAndName, arg.SchoolID, arg.Name)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countListProfessorsBySchoolAndNameAndFaculty = `-- name: CountListProfessorsBySchoolAndNameAndFaculty :one
SELECT COUNT(*)::int FROM professors P
  WHERE faculty_id = $1 AND school_id = $2 AND (
  LOWER(P.first_name) LIKE LOWER($3::varchar)
  OR LOWER(P.last_name) LIKE LOWER($3::varchar)
  OR LOWER(concat(P.first_name, ' ', P.last_name)) LIKE LOWER($3::varchar)
)
`

type CountListProfessorsBySchoolAndNameAndFacultyParams struct {
	FacultyID int32  `json:"facultyId"`
	SchoolID  int32  `json:"schoolId"`
	Name      string `json:"name"`
}

func (q *Queries) CountListProfessorsBySchoolAndNameAndFaculty(ctx context.Context, arg CountListProfessorsBySchoolAndNameAndFacultyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, countListProfessorsBySchoolAndNameAndFaculty, arg.FacultyID, arg.SchoolID, arg.Name)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const createProfessor = `-- name: CreateProfessor :one
INSERT INTO professors (
  first_name,
  last_name,
  faculty_id,
  school_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id
`

type CreateProfessorParams struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	FacultyID int32  `json:"facultyId"`
	SchoolID  int32  `json:"schoolId"`
}

func (q *Queries) CreateProfessor(ctx context.Context, arg CreateProfessorParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProfessor,
		arg.FirstName,
		arg.LastName,
		arg.FacultyID,
		arg.SchoolID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getProfessorInfo = `-- name: GetProfessorInfo :one
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.total_review,
  P.rating,
  P.would_take_again,
  P.level_of_difficulty,
  F.id as faculty_id,
  F.name as faculty_name,
  S.id as school_id,
  S.name as school_name,
  SUM(CASE PR.quality when 1 then 1 else 0 end)::int as terrible,
  SUM(CASE PR.quality when 2 then 1 else 0 end)::int as poor,
  SUM(CASE PR.quality when 3 then 1 else 0 end)::int as fair,
  SUM(CASE PR.quality when 4 then 1 else 0 end)::int as good,
  SUM(CASE PR.quality when 5 then 1 else 0 end)::int as excellent
FROM professors P
  LEFT JOIN professor_ratings PR ON P.id = PR.professor_id
  JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
WHERE
  P.id = $1
GROUP BY P.id, F.id, S.id
`

type GetProfessorInfoRow struct {
	ID                int32  `json:"id"`
	FirstName         string `json:"firstName"`
	LastName          string `json:"lastName"`
	TotalReview       int32  `json:"totalReview"`
	Rating            string `json:"rating"`
	WouldTakeAgain    int16  `json:"wouldTakeAgain"`
	LevelOfDifficulty string `json:"levelOfDifficulty"`
	FacultyID         int32  `json:"facultyId"`
	FacultyName       string `json:"facultyName"`
	SchoolID          int32  `json:"schoolId"`
	SchoolName        string `json:"schoolName"`
	Terrible          int32  `json:"terrible"`
	Poor              int32  `json:"poor"`
	Fair              int32  `json:"fair"`
	Good              int32  `json:"good"`
	Excellent         int32  `json:"excellent"`
}

func (q *Queries) GetProfessorInfo(ctx context.Context, id int32) (GetProfessorInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getProfessorInfo, id)
	var i GetProfessorInfoRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.TotalReview,
		&i.Rating,
		&i.WouldTakeAgain,
		&i.LevelOfDifficulty,
		&i.FacultyID,
		&i.FacultyName,
		&i.SchoolID,
		&i.SchoolName,
		&i.Terrible,
		&i.Poor,
		&i.Fair,
		&i.Good,
		&i.Excellent,
	)
	return i, err
}

const listProfessors = `-- name: ListProfessors :many
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.rating,
  F.name as faculty_name,
  S.name as school_name
FROM professors P
  JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
ORDER BY
  CASE
    WHEN $3::varchar = 'name' AND $4::varchar = 'asc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END,
  CASE
    WHEN $3::varchar = 'name' AND $4::varchar = 'desc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END DESC,
  CASE
    WHEN $3::varchar = 'rating' AND $4::varchar = 'asc' THEN P.rating
    ELSE NULL
  END,
  CASE
    WHEN $3::varchar = 'rating' AND $4::varchar = 'desc' THEN P.rating
    ELSE NULL
  END DESC
LIMIT $1
OFFSET $2
`

type ListProfessorsParams struct {
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	SortBy    string `json:"sortBy"`
	SortOrder string `json:"sortOrder"`
}

type ListProfessorsRow struct {
	ID          int32  `json:"id"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Rating      string `json:"rating"`
	FacultyName string `json:"facultyName"`
	SchoolName  string `json:"schoolName"`
}

func (q *Queries) ListProfessors(ctx context.Context, arg ListProfessorsParams) ([]ListProfessorsRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfessors,
		arg.Limit,
		arg.Offset,
		arg.SortBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProfessorsRow{}
	for rows.Next() {
		var i ListProfessorsRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Rating,
			&i.FacultyName,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfessorsByFaculty = `-- name: ListProfessorsByFaculty :many
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.rating,
  F.name as faculty_name,
  S.name as school_name
FROM professors P
  JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
WHERE P.faculty_id = $1
ORDER BY
  CASE
    WHEN $4::varchar = 'name' AND $5::varchar = 'asc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END,
  CASE
    WHEN $4::varchar = 'name' AND $5::varchar = 'desc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END DESC,
  CASE
    WHEN $4::varchar = 'rating' AND $5::varchar = 'asc' THEN P.rating
    ELSE NULL
  END,
  CASE
    WHEN $4::varchar = 'rating' AND $5::varchar = 'desc' THEN P.rating
    ELSE NULL
  END DESC
LIMIT $2
OFFSET $3
`

type ListProfessorsByFacultyParams struct {
	FacultyID int32  `json:"facultyId"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	SortBy    string `json:"sortBy"`
	SortOrder string `json:"sortOrder"`
}

type ListProfessorsByFacultyRow struct {
	ID          int32  `json:"id"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Rating      string `json:"rating"`
	FacultyName string `json:"facultyName"`
	SchoolName  string `json:"schoolName"`
}

func (q *Queries) ListProfessorsByFaculty(ctx context.Context, arg ListProfessorsByFacultyParams) ([]ListProfessorsByFacultyRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfessorsByFaculty,
		arg.FacultyID,
		arg.Limit,
		arg.Offset,
		arg.SortBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProfessorsByFacultyRow{}
	for rows.Next() {
		var i ListProfessorsByFacultyRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Rating,
			&i.FacultyName,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfessorsByFacultyAndSchool = `-- name: ListProfessorsByFacultyAndSchool :many
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.rating,
  F.name as faculty_name,
  S.name as school_name
FROM professors P
  LEFT JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
WHERE P.faculty_id = $1 AND P.school_id = $2
ORDER BY
  CASE
    WHEN $5::varchar = 'name' AND $6::varchar = 'asc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END,
  CASE
    WHEN $5::varchar = 'name' AND $6::varchar = 'desc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END DESC,
  CASE
    WHEN $5::varchar = 'rating' AND $6::varchar = 'asc' THEN P.rating
    ELSE NULL
  END,
  CASE
    WHEN $5::varchar = 'rating' AND $6::varchar = 'desc' THEN P.rating
    ELSE NULL
  END DESC
LIMIT $3
OFFSET $4
`

type ListProfessorsByFacultyAndSchoolParams struct {
	FacultyID int32  `json:"facultyId"`
	SchoolID  int32  `json:"schoolId"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	SortBy    string `json:"sortBy"`
	SortOrder string `json:"sortOrder"`
}

type ListProfessorsByFacultyAndSchoolRow struct {
	ID          int32          `json:"id"`
	FirstName   string         `json:"firstName"`
	LastName    string         `json:"lastName"`
	Rating      string         `json:"rating"`
	FacultyName sql.NullString `json:"facultyName"`
	SchoolName  string         `json:"schoolName"`
}

func (q *Queries) ListProfessorsByFacultyAndSchool(ctx context.Context, arg ListProfessorsByFacultyAndSchoolParams) ([]ListProfessorsByFacultyAndSchoolRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfessorsByFacultyAndSchool,
		arg.FacultyID,
		arg.SchoolID,
		arg.Limit,
		arg.Offset,
		arg.SortBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProfessorsByFacultyAndSchoolRow{}
	for rows.Next() {
		var i ListProfessorsByFacultyAndSchoolRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Rating,
			&i.FacultyName,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfessorsByName = `-- name: ListProfessorsByName :many
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.rating,
  F.name as faculty_name,
  S.name as school_name
FROM professors P
  JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
WHERE LOWER(P.first_name) LIKE LOWER($3::varchar)
  OR LOWER(P.last_name) LIKE LOWER($3::varchar)
  OR LOWER(concat(P.first_name, ' ', P.last_name)) LIKE LOWER($3::varchar)
ORDER BY
  CASE
    WHEN $4::varchar = 'name' AND $5::varchar = 'asc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END,
  CASE
    WHEN $4::varchar = 'name' AND $5::varchar = 'desc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END DESC,
  CASE
    WHEN $4::varchar = 'rating' AND $5::varchar = 'asc' THEN P.rating
    ELSE NULL
  END,
  CASE
    WHEN $4::varchar = 'rating' AND $5::varchar = 'desc' THEN P.rating
    ELSE NULL
  END DESC
LIMIT $1
OFFSET $2
`

type ListProfessorsByNameParams struct {
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	Name      string `json:"name"`
	SortBy    string `json:"sortBy"`
	SortOrder string `json:"sortOrder"`
}

type ListProfessorsByNameRow struct {
	ID          int32  `json:"id"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Rating      string `json:"rating"`
	FacultyName string `json:"facultyName"`
	SchoolName  string `json:"schoolName"`
}

func (q *Queries) ListProfessorsByName(ctx context.Context, arg ListProfessorsByNameParams) ([]ListProfessorsByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfessorsByName,
		arg.Limit,
		arg.Offset,
		arg.Name,
		arg.SortBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProfessorsByNameRow{}
	for rows.Next() {
		var i ListProfessorsByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Rating,
			&i.FacultyName,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfessorsBySchool = `-- name: ListProfessorsBySchool :many
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.rating,
  F.name as faculty_name,
  S.name as school_name
FROM professors P
  JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
WHERE P.school_id = $1
ORDER BY
  CASE
    WHEN $4::varchar = 'name' AND $5::varchar = 'asc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END,
  CASE
    WHEN $4::varchar = 'name' AND $5::varchar = 'desc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END DESC,
  CASE
    WHEN $4::varchar = 'rating' AND $5::varchar = 'asc' THEN P.rating
    ELSE NULL
  END,
  CASE
    WHEN $4::varchar = 'rating' AND $5::varchar = 'desc' THEN P.rating
    ELSE NULL
  END DESC
LIMIT $2
OFFSET $3
`

type ListProfessorsBySchoolParams struct {
	SchoolID  int32  `json:"schoolId"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	SortBy    string `json:"sortBy"`
	SortOrder string `json:"sortOrder"`
}

type ListProfessorsBySchoolRow struct {
	ID          int32  `json:"id"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Rating      string `json:"rating"`
	FacultyName string `json:"facultyName"`
	SchoolName  string `json:"schoolName"`
}

func (q *Queries) ListProfessorsBySchool(ctx context.Context, arg ListProfessorsBySchoolParams) ([]ListProfessorsBySchoolRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfessorsBySchool,
		arg.SchoolID,
		arg.Limit,
		arg.Offset,
		arg.SortBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProfessorsBySchoolRow{}
	for rows.Next() {
		var i ListProfessorsBySchoolRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Rating,
			&i.FacultyName,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfessorsBySchoolAndName = `-- name: ListProfessorsBySchoolAndName :many
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.rating,
  F.name as faculty_name,
  S.name as school_name
FROM professors P
  JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
WHERE P.school_id = $1 AND (
  LOWER(P.first_name) LIKE LOWER($4::varchar)
  OR LOWER(P.last_name) LIKE LOWER($4::varchar)
  OR LOWER(concat(P.first_name, ' ', P.last_name)) LIKE LOWER($4::varchar)
)
ORDER BY
  CASE
    WHEN $5::varchar = 'name' AND $6::varchar = 'asc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END,
  CASE
    WHEN $5::varchar = 'name' AND $6::varchar = 'desc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END DESC,
  CASE
    WHEN $5::varchar = 'rating' AND $6::varchar = 'asc' THEN P.rating
    ELSE NULL
  END,
  CASE
    WHEN $5::varchar = 'rating' AND $6::varchar = 'desc' THEN P.rating
    ELSE NULL
  END DESC
LIMIT $2
OFFSET $3
`

type ListProfessorsBySchoolAndNameParams struct {
	SchoolID  int32  `json:"schoolId"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	Name      string `json:"name"`
	SortBy    string `json:"sortBy"`
	SortOrder string `json:"sortOrder"`
}

type ListProfessorsBySchoolAndNameRow struct {
	ID          int32  `json:"id"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Rating      string `json:"rating"`
	FacultyName string `json:"facultyName"`
	SchoolName  string `json:"schoolName"`
}

func (q *Queries) ListProfessorsBySchoolAndName(ctx context.Context, arg ListProfessorsBySchoolAndNameParams) ([]ListProfessorsBySchoolAndNameRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfessorsBySchoolAndName,
		arg.SchoolID,
		arg.Limit,
		arg.Offset,
		arg.Name,
		arg.SortBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProfessorsBySchoolAndNameRow{}
	for rows.Next() {
		var i ListProfessorsBySchoolAndNameRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Rating,
			&i.FacultyName,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfessorsBySchoolAndNameAndFaculty = `-- name: ListProfessorsBySchoolAndNameAndFaculty :many
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.rating,
  F.name as faculty_name,
  S.name as school_name
FROM professors P
  JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
WHERE P.faculty_id = $1 AND P.school_id = $2 AND (
  LOWER(P.first_name) LIKE LOWER($5::varchar)
  OR LOWER(P.last_name) LIKE LOWER($5::varchar)
  OR LOWER(concat(P.first_name, ' ', P.last_name)) LIKE LOWER($5::varchar)
)
ORDER BY
  CASE
    WHEN $6::varchar = 'name' AND $7::varchar = 'asc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END,
  CASE
    WHEN $6::varchar = 'name' AND $7::varchar = 'desc' THEN LOWER(concat(P.first_name, ' ', P.last_name))
    ELSE NULL
  END DESC,
  CASE
    WHEN $6::varchar = 'rating' AND $7::varchar = 'asc' THEN P.rating
    ELSE NULL
  END,
  CASE
    WHEN $6::varchar = 'rating' AND $7::varchar = 'desc' THEN P.rating
    ELSE NULL
  END DESC
LIMIT $3
OFFSET $4
`

type ListProfessorsBySchoolAndNameAndFacultyParams struct {
	FacultyID int32  `json:"facultyId"`
	SchoolID  int32  `json:"schoolId"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	Name      string `json:"name"`
	SortBy    string `json:"sortBy"`
	SortOrder string `json:"sortOrder"`
}

type ListProfessorsBySchoolAndNameAndFacultyRow struct {
	ID          int32  `json:"id"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Rating      string `json:"rating"`
	FacultyName string `json:"facultyName"`
	SchoolName  string `json:"schoolName"`
}

func (q *Queries) ListProfessorsBySchoolAndNameAndFaculty(ctx context.Context, arg ListProfessorsBySchoolAndNameAndFacultyParams) ([]ListProfessorsBySchoolAndNameAndFacultyRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfessorsBySchoolAndNameAndFaculty,
		arg.FacultyID,
		arg.SchoolID,
		arg.Limit,
		arg.Offset,
		arg.Name,
		arg.SortBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProfessorsBySchoolAndNameAndFacultyRow{}
	for rows.Next() {
		var i ListProfessorsBySchoolAndNameAndFacultyRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Rating,
			&i.FacultyName,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopCoursesTaught = `-- name: ListTopCoursesTaught :many
SELECT PR.course_code FROM professor_ratings PR
  JOIN courses C on C.code = PR.course_code
WHERE
  PR.professor_id = $1
GROUP BY
  PR.course_code
ORDER BY COUNT(*)::int DESC
LIMIT 3
`

func (q *Queries) ListTopCoursesTaught(ctx context.Context, professorID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listTopCoursesTaught, professorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var course_code string
		if err := rows.Scan(&course_code); err != nil {
			return nil, err
		}
		items = append(items, course_code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopTags = `-- name: ListTopTags :many
SELECT PRT.tag_name as tag_names FROM professor_rating_tags PRT
  JOIN professor_ratings PR ON PRT.professor_rating_id = PR.id
WHERE
  PR.professor_id = $1
GROUP BY PRT.tag_name
ORDER BY COUNT(PRT.tag_name) DESC
LIMIT 5
`

func (q *Queries) ListTopTags(ctx context.Context, professorID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listTopTags, professorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag_names string
		if err := rows.Scan(&tag_names); err != nil {
			return nil, err
		}
		items = append(items, tag_names)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const randomProfessorID = `-- name: RandomProfessorID :one
SELECT id FROM professors
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) RandomProfessorID(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, randomProfessorID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateProfessorStatusRequest = `-- name: UpdateProfessorStatusRequest :one
UPDATE professors
SET
  status = $1
WHERE
  id = $2::int
RETURNING status
`

type UpdateProfessorStatusRequestParams struct {
	Status Statusrequest `json:"status"`
	ID     int32         `json:"id"`
}

func (q *Queries) UpdateProfessorStatusRequest(ctx context.Context, arg UpdateProfessorStatusRequestParams) (Statusrequest, error) {
	row := q.db.QueryRowContext(ctx, updateProfessorStatusRequest, arg.Status, arg.ID)
	var status Statusrequest
	err := row.Scan(&status)
	return status, err
}
