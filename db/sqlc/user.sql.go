// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const countUser = `-- name: CountUser :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  first_name,
  last_name,
  school,
  expected_year_of_graduation,
  email
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, first_name, last_name, school, expected_year_of_graduation, email, created_at
`

type CreateUserParams struct {
	FirstName                string         `json:"first_name"`
	LastName                 string         `json:"last_name"`
	School                   sql.NullString `json:"school"`
	ExpectedYearOfGraduation sql.NullInt16  `json:"expected_year_of_graduation"`
	Email                    string         `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.School,
		arg.ExpectedYearOfGraduation,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.School,
		&i.ExpectedYearOfGraduation,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const createUserSaveProfessor = `-- name: CreateUserSaveProfessor :exec
INSERT INTO user_save_professors (
  professor_id,
  user_id
) VALUES (
  $1, $2
)
`

type CreateUserSaveProfessorParams struct {
	ProfessorID int64 `json:"professor_id"`
	UserID      int64 `json:"user_id"`
}

func (q *Queries) CreateUserSaveProfessor(ctx context.Context, arg CreateUserSaveProfessorParams) error {
	_, err := q.db.ExecContext(ctx, createUserSaveProfessor, arg.ProfessorID, arg.UserID)
	return err
}

const deleteUserSaveProfessor = `-- name: DeleteUserSaveProfessor :exec
DELETE FROM user_save_professors
WHERE
  professor_id = $1
AND
  user_id = $2
`

type DeleteUserSaveProfessorParams struct {
	ProfessorID int64 `json:"professor_id"`
	UserID      int64 `json:"user_id"`
}

func (q *Queries) DeleteUserSaveProfessor(ctx context.Context, arg DeleteUserSaveProfessorParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserSaveProfessor, arg.ProfessorID, arg.UserID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, school, expected_year_of_graduation, email, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.School,
		&i.ExpectedYearOfGraduation,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  first_name = COALESCE($1, first_name),
  last_name = COALESCE($2, last_name),
  school = COALESCE($3, school),
  expected_year_of_graduation = COALESCE($4, expected_year_of_graduation)
WHERE
  id = $5
RETURNING id, first_name, last_name, school, expected_year_of_graduation, email, created_at
`

type UpdateUserParams struct {
	FirstName                sql.NullString `json:"first_name"`
	LastName                 sql.NullString `json:"last_name"`
	School                   sql.NullString `json:"school"`
	ExpectedYearOfGraduation sql.NullInt16  `json:"expected_year_of_graduation"`
	ID                       int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.School,
		arg.ExpectedYearOfGraduation,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.School,
		&i.ExpectedYearOfGraduation,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const userListProfessorRatings = `-- name: UserListProfessorRatings :many
SELECT
  PR.id,
  PR.quality,
  PR.difficult,
  PR.would_take_again,
  PR.taken_for_credit,
  PR.use_textbooks,
  PR.attendance_mandatory,
  PR.grade,
  PR.tags,
  PR.review,
  PR.created_at,
  P.first_name as professor_first_name,
  P.last_name as professor_last_name,
  S.name as school_name,
  C.name as course_name
FROM professor_ratings PR
  JOIN professors P ON PR.professor_id = P.id
  JOIN schools S ON P.school_id = S.id
  JOIN courses C ON C.course_code = PR.course_code
WHERE
  PR.user_id = $1
LIMIT $2
OFFSET $3
`

type UserListProfessorRatingsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type UserListProfessorRatingsRow struct {
	ID                  int64          `json:"id"`
	Quality             string         `json:"quality"`
	Difficult           string         `json:"difficult"`
	WouldTakeAgain      int16          `json:"would_take_again"`
	TakenForCredit      sql.NullBool   `json:"taken_for_credit"`
	UseTextbooks        sql.NullBool   `json:"use_textbooks"`
	AttendanceMandatory int16          `json:"attendance_mandatory"`
	Grade               sql.NullString `json:"grade"`
	Tags                []string       `json:"tags"`
	Review              string         `json:"review"`
	CreatedAt           time.Time      `json:"created_at"`
	ProfessorFirstName  string         `json:"professor_first_name"`
	ProfessorLastName   string         `json:"professor_last_name"`
	SchoolName          string         `json:"school_name"`
	CourseName          string         `json:"course_name"`
}

func (q *Queries) UserListProfessorRatings(ctx context.Context, arg UserListProfessorRatingsParams) ([]UserListProfessorRatingsRow, error) {
	rows, err := q.db.QueryContext(ctx, userListProfessorRatings, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserListProfessorRatingsRow{}
	for rows.Next() {
		var i UserListProfessorRatingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Quality,
			&i.Difficult,
			&i.WouldTakeAgain,
			&i.TakenForCredit,
			&i.UseTextbooks,
			&i.AttendanceMandatory,
			&i.Grade,
			pq.Array(&i.Tags),
			&i.Review,
			&i.CreatedAt,
			&i.ProfessorFirstName,
			&i.ProfessorLastName,
			&i.SchoolName,
			&i.CourseName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userListSavedProfessors = `-- name: UserListSavedProfessors :many
SELECT
  P.id,
  P.first_name,
  P.last_name,
  P.rating,
  P.total_review,
  P.would_take_again,
  P.level_of_difficulty,
  F.name as faculty_name,
  S.name as school_name
FROM user_save_professors USP
  JOIN professors P ON USP.professor_id = P.id
  JOIN faculties F ON P.faculty_id = F.id
  JOIN schools S ON P.school_id = S.id
WHERE
  USP.user_id = $1
LIMIT $2
OFFSET $3
`

type UserListSavedProfessorsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type UserListSavedProfessorsRow struct {
	ID                int64  `json:"id"`
	FirstName         string `json:"first_name"`
	LastName          string `json:"last_name"`
	Rating            int16  `json:"rating"`
	TotalReview       int32  `json:"total_review"`
	WouldTakeAgain    int16  `json:"would_take_again"`
	LevelOfDifficulty string `json:"level_of_difficulty"`
	FacultyName       string `json:"faculty_name"`
	SchoolName        string `json:"school_name"`
}

func (q *Queries) UserListSavedProfessors(ctx context.Context, arg UserListSavedProfessorsParams) ([]UserListSavedProfessorsRow, error) {
	rows, err := q.db.QueryContext(ctx, userListSavedProfessors, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserListSavedProfessorsRow{}
	for rows.Next() {
		var i UserListSavedProfessorsRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Rating,
			&i.TotalReview,
			&i.WouldTakeAgain,
			&i.LevelOfDifficulty,
			&i.FacultyName,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userListSchoolRatings = `-- name: UserListSchoolRatings :many
SELECT
  SR.id,
  SR.reputation,
  SR.location,
  SR.opportunities,
  SR.facilities,
  SR.internet,
  SR.food,
  SR.clubs,
  SR.social,
  SR.happiness,
  SR.safety,
  SR.review,
  SR.overall_rating,
  SR.created_at,
  S.name as school_name
FROM school_ratings SR
  JOIN schools S ON SR.school_id = S.id
WHERE
  SR.user_id = $1
LIMIT $2
OFFSET $3
`

type UserListSchoolRatingsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type UserListSchoolRatingsRow struct {
	ID            int64     `json:"id"`
	Reputation    int16     `json:"reputation"`
	Location      int16     `json:"location"`
	Opportunities int16     `json:"opportunities"`
	Facilities    int16     `json:"facilities"`
	Internet      int16     `json:"internet"`
	Food          int16     `json:"food"`
	Clubs         int16     `json:"clubs"`
	Social        int16     `json:"social"`
	Happiness     int16     `json:"happiness"`
	Safety        int16     `json:"safety"`
	Review        string    `json:"review"`
	OverallRating string    `json:"overall_rating"`
	CreatedAt     time.Time `json:"created_at"`
	SchoolName    string    `json:"school_name"`
}

func (q *Queries) UserListSchoolRatings(ctx context.Context, arg UserListSchoolRatingsParams) ([]UserListSchoolRatingsRow, error) {
	rows, err := q.db.QueryContext(ctx, userListSchoolRatings, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserListSchoolRatingsRow{}
	for rows.Next() {
		var i UserListSchoolRatingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Reputation,
			&i.Location,
			&i.Opportunities,
			&i.Facilities,
			&i.Internet,
			&i.Food,
			&i.Clubs,
			&i.Social,
			&i.Happiness,
			&i.Safety,
			&i.Review,
			&i.OverallRating,
			&i.CreatedAt,
			&i.SchoolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
