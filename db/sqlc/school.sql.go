// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: school.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const countSchool = `-- name: CountSchool :one
SELECT COUNT(*) FROM schools
`

func (q *Queries) CountSchool(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSchool)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSchool = `-- name: CreateSchool :one
INSERT INTO schools (
  name,
  nick_name,
  city,
  province,
  website,
  email
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, name, nick_name, city, province, website, email, status, verified_date
`

type CreateSchoolParams struct {
	Name     string   `json:"name"`
	NickName []string `json:"nickName"`
	City     string   `json:"city"`
	Province string   `json:"province"`
	Website  string   `json:"website"`
	Email    string   `json:"email"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, createSchool,
		arg.Name,
		pq.Array(arg.NickName),
		arg.City,
		arg.Province,
		arg.Website,
		arg.Email,
	)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.NickName),
		&i.City,
		&i.Province,
		&i.Website,
		&i.Email,
		&i.Status,
		&i.VerifiedDate,
	)
	return i, err
}

const getSchool = `-- name: GetSchool :one
SELECT id, name, nick_name, city, province, website, email, status, verified_date FROM schools
WHERE id = $1
`

func (q *Queries) GetSchool(ctx context.Context, id int64) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchool, id)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.NickName),
		&i.City,
		&i.Province,
		&i.Website,
		&i.Email,
		&i.Status,
		&i.VerifiedDate,
	)
	return i, err
}

const getSchoolInfoAggregate = `-- name: GetSchoolInfoAggregate :one
SELECT
  AVG(SR.reputation)::smallint as reputation,
  AVG(SR.location)::smallint as location,
  AVG(SR.opportunities)::smallint as opportunities,
  AVG(SR.facilities)::smallint as facilities,
  AVG(SR.internet)::smallint as internet,
  AVG(SR.food)::smallint as food,
  AVG(SR.clubs)::smallint as clubs,
  AVG(SR.social)::smallint as social,
  AVG(SR.happiness)::smallint as happiness,
  AVG(SR.safety)::smallint as safety,
  AVG(SR.overall_rating)::smallint as overall_rating
FROM schools S
  JOIN school_ratings SR ON S.id = SR.school_id
WHERE
  S.id = $1
GROUP BY S.id
`

type GetSchoolInfoAggregateRow struct {
	Reputation    int16 `json:"reputation"`
	Location      int16 `json:"location"`
	Opportunities int16 `json:"opportunities"`
	Facilities    int16 `json:"facilities"`
	Internet      int16 `json:"internet"`
	Food          int16 `json:"food"`
	Clubs         int16 `json:"clubs"`
	Social        int16 `json:"social"`
	Happiness     int16 `json:"happiness"`
	Safety        int16 `json:"safety"`
	OverallRating int16 `json:"overallRating"`
}

func (q *Queries) GetSchoolInfoAggregate(ctx context.Context, id int64) (GetSchoolInfoAggregateRow, error) {
	row := q.db.QueryRowContext(ctx, getSchoolInfoAggregate, id)
	var i GetSchoolInfoAggregateRow
	err := row.Scan(
		&i.Reputation,
		&i.Location,
		&i.Opportunities,
		&i.Facilities,
		&i.Internet,
		&i.Food,
		&i.Clubs,
		&i.Social,
		&i.Happiness,
		&i.Safety,
		&i.OverallRating,
	)
	return i, err
}

const listSchools = `-- name: ListSchools :many
SELECT
  S.id,
  S.name
FROM schools S
LIMIT $1
OFFSET $2
`

type ListSchoolsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSchoolsRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListSchools(ctx context.Context, arg ListSchoolsParams) ([]ListSchoolsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSchools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSchoolsRow{}
	for rows.Next() {
		var i ListSchoolsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSchoolsByNameOrNickName = `-- name: SearchSchoolsByNameOrNickName :many
SELECT
  id,
  name,
  city,
  province
FROM schools
WHERE name ILIKE $1 OR $1 ILIKE ANY(nick_name)
LIMIT 5
`

type SearchSchoolsByNameOrNickNameRow struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	City     string `json:"city"`
	Province string `json:"province"`
}

func (q *Queries) SearchSchoolsByNameOrNickName(ctx context.Context, name string) ([]SearchSchoolsByNameOrNickNameRow, error) {
	rows, err := q.db.QueryContext(ctx, searchSchoolsByNameOrNickName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchSchoolsByNameOrNickNameRow{}
	for rows.Next() {
		var i SearchSchoolsByNameOrNickNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.Province,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchoolStatusRequest = `-- name: UpdateSchoolStatusRequest :one
UPDATE schools
SET
  status = $1
WHERE
  id = $2::bigint
RETURNING id, name, nick_name, city, province, website, email, status, verified_date
`

type UpdateSchoolStatusRequestParams struct {
	Status Statusrequest `json:"status"`
	ID     int64         `json:"id"`
}

func (q *Queries) UpdateSchoolStatusRequest(ctx context.Context, arg UpdateSchoolStatusRequestParams) (School, error) {
	row := q.db.QueryRowContext(ctx, updateSchoolStatusRequest, arg.Status, arg.ID)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.NickName),
		&i.City,
		&i.Province,
		&i.Website,
		&i.Email,
		&i.Status,
		&i.VerifiedDate,
	)
	return i, err
}
