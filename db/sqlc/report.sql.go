// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: report.sql

package db

import (
	"context"
)

const createReport = `-- name: CreateReport :one
INSERT INTO report_forms (
  comment,
  professor_rating_id,
  user_id
) VALUES (
  $1, $2, $3
) RETURNING id, comment, status, request_date, verified_date, professor_rating_id, user_id
`

type CreateReportParams struct {
	Comment           string `json:"comment"`
	ProfessorRatingID int32  `json:"professorRatingID"`
	UserID            string `json:"userID"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (ReportForm, error) {
	row := q.db.QueryRowContext(ctx, createReport, arg.Comment, arg.ProfessorRatingID, arg.UserID)
	var i ReportForm
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.Status,
		&i.RequestDate,
		&i.VerifiedDate,
		&i.ProfessorRatingID,
		&i.UserID,
	)
	return i, err
}

const listReport = `-- name: ListReport :many
SELECT id, comment, status, request_date, verified_date, professor_rating_id, user_id FROM report_forms
LIMIT $1
OFFSET $2
`

type ListReportParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReport(ctx context.Context, arg ListReportParams) ([]ReportForm, error) {
	rows, err := q.db.QueryContext(ctx, listReport, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportForm{}
	for rows.Next() {
		var i ReportForm
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.Status,
			&i.RequestDate,
			&i.VerifiedDate,
			&i.ProfessorRatingID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReport = `-- name: UpdateReport :one
UPDATE report_forms
SET
  status = $1
WHERE
  id = $2::int
RETURNING id, comment, status, request_date, verified_date, professor_rating_id, user_id
`

type UpdateReportParams struct {
	Status Statusrequest `json:"status"`
	ID     int32         `json:"id"`
}

func (q *Queries) UpdateReport(ctx context.Context, arg UpdateReportParams) (ReportForm, error) {
	row := q.db.QueryRowContext(ctx, updateReport, arg.Status, arg.ID)
	var i ReportForm
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.Status,
		&i.RequestDate,
		&i.VerifiedDate,
		&i.ProfessorRatingID,
		&i.UserID,
	)
	return i, err
}
