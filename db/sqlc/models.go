// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Statusrequest string

const (
	StatusrequestPending  Statusrequest = "pending"
	StatusrequestVerified Statusrequest = "verified"
	StatusrequestRejected Statusrequest = "rejected"
)

func (e *Statusrequest) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Statusrequest(s)
	case string:
		*e = Statusrequest(s)
	default:
		return fmt.Errorf("unsupported scan type for Statusrequest: %T", src)
	}
	return nil
}

type NullStatusrequest struct {
	Statusrequest Statusrequest
	Valid         bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusrequest) Scan(value interface{}) error {
	if value == nil {
		ns.Statusrequest, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Statusrequest.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusrequest) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Statusrequest, nil
}

type CorrectionForm struct {
	ID           int64         `json:"id"`
	Problem      string        `json:"problem"`
	CorrectInfo  string        `json:"correctInfo"`
	Email        string        `json:"email"`
	Status       Statusrequest `json:"status"`
	RequestDate  time.Time     `json:"requestDate"`
	VerifiedDate time.Time     `json:"verifiedDate"`
	UserID       int64         `json:"userID"`
}

type Course struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

type Faculty struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

//
//       List of derived attribute:
//       1. 5 distribusi nilai (from quality)
//
type Professor struct {
	ID                int64         `json:"id"`
	FirstName         string        `json:"firstName"`
	LastName          string        `json:"lastName"`
	Rating            string        `json:"rating"`
	TotalReview       int32         `json:"totalReview"`
	WouldTakeAgain    int16         `json:"wouldTakeAgain"`
	LevelOfDifficulty string        `json:"levelOfDifficulty"`
	CreatedAt         time.Time     `json:"createdAt"`
	Status            Statusrequest `json:"status"`
	VerifiedDate      time.Time     `json:"verifiedDate"`
	FacultyID         int64         `json:"facultyID"`
	SchoolID          int64         `json:"schoolID"`
}

type ProfessorCourseAssociation struct {
	ProfessorID int64  `json:"professorID"`
	CourseCode  string `json:"courseCode"`
}

//
//       taken_for_credit (int):
//       0 -> unknown
//       1 -> false
//       2 -> true
//
//       use_textbooks (int):
//       0 -> unknown
//       1 -> false
//       2 -> true
//
//       attendance_mandatory (int):
//       0 -> unknown
//       1 -> false
//       2 -> true
//
//       would_take_again (int):
//       0 -> false
//       1 -> true
//
type ProfessorRating struct {
	ID                  int64         `json:"id"`
	Quality             string        `json:"quality"`
	Difficult           string        `json:"difficult"`
	WouldTakeAgain      int16         `json:"wouldTakeAgain"`
	TakenForCredit      int16         `json:"takenForCredit"`
	UseTextbooks        int16         `json:"useTextbooks"`
	AttendanceMandatory int16         `json:"attendanceMandatory"`
	Grade               string        `json:"grade"`
	Review              string        `json:"review"`
	UpVote              int32         `json:"upVote"`
	DownVote            int32         `json:"downVote"`
	CreatedAt           time.Time     `json:"createdAt"`
	EditedAt            time.Time     `json:"editedAt"`
	Status              Statusrequest `json:"status"`
	VerifiedDate        time.Time     `json:"verifiedDate"`
	ProfessorID         int64         `json:"professorID"`
	CourseCode          string        `json:"courseCode"`
	UserID              int64         `json:"userID"`
}

type ProfessorRatingTag struct {
	TagName           string `json:"tagName"`
	ProfessorRatingID int64  `json:"professorRatingID"`
}

type ReportForm struct {
	ID                int64         `json:"id"`
	Comment           string        `json:"comment"`
	Status            Statusrequest `json:"status"`
	RequestDate       time.Time     `json:"requestDate"`
	VerifiedDate      time.Time     `json:"verifiedDate"`
	ProfessorRatingID int64         `json:"professorRatingID"`
	UserID            int64         `json:"userID"`
}

//
//       List of derived attribute:
//       1. 10 avg field school rating
//       2. avg overall quality
//
type School struct {
	ID           int64         `json:"id"`
	Name         string        `json:"name"`
	NickName     []string      `json:"nickName"`
	City         string        `json:"city"`
	Province     string        `json:"province"`
	Website      string        `json:"website"`
	Email        string        `json:"email"`
	Status       Statusrequest `json:"status"`
	VerifiedDate time.Time     `json:"verifiedDate"`
}

type SchoolFacultyAssociation struct {
	FacultyID int64 `json:"facultyID"`
	SchoolID  int64 `json:"schoolID"`
}

type SchoolRating struct {
	ID            int64         `json:"id"`
	Reputation    int16         `json:"reputation"`
	Location      int16         `json:"location"`
	Opportunities int16         `json:"opportunities"`
	Facilities    int16         `json:"facilities"`
	Internet      int16         `json:"internet"`
	Food          int16         `json:"food"`
	Clubs         int16         `json:"clubs"`
	Social        int16         `json:"social"`
	Happiness     int16         `json:"happiness"`
	Safety        int16         `json:"safety"`
	Review        string        `json:"review"`
	UpVote        int32         `json:"upVote"`
	DownVote      int32         `json:"downVote"`
	OverallRating string        `json:"overallRating"`
	CreatedAt     time.Time     `json:"createdAt"`
	EditedAt      time.Time     `json:"editedAt"`
	Status        Statusrequest `json:"status"`
	VerifiedDate  time.Time     `json:"verifiedDate"`
	UserID        int64         `json:"userID"`
	SchoolID      int64         `json:"schoolID"`
}

type Tag struct {
	Name string `json:"name"`
}

type User struct {
	ID                       int64     `json:"id"`
	FirstName                string    `json:"firstName"`
	LastName                 string    `json:"lastName"`
	School                   string    `json:"school"`
	ExpectedYearOfGraduation int16     `json:"expectedYearOfGraduation"`
	Email                    string    `json:"email"`
	CreatedAt                time.Time `json:"createdAt"`
}

type UserSaveProfessor struct {
	ProfessorID int64 `json:"professorID"`
	UserID      int64 `json:"userID"`
}
