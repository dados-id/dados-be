// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tag.sql

package db

import (
	"context"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
  name
) VALUES (
  $1
) RETURNING name
`

func (q *Queries) CreateTag(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	err := row.Scan(&name)
	return name, err
}

const listTagsByProfessorRatingId = `-- name: ListTagsByProfessorRatingId :many
SELECT T.name as tags
FROM professor_ratings PR
JOIN professor_rating_tags PRT ON PRT.professor_rating_id = PR.id
JOIN tags T ON PRT.tag_name = T.name
WHERE PR.id = $1
`

func (q *Queries) ListTagsByProfessorRatingId(ctx context.Context, id int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listTagsByProfessorRatingId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tags string
		if err := rows.Scan(&tags); err != nil {
			return nil, err
		}
		items = append(items, tags)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const randomTag = `-- name: RandomTag :one
SELECT name FROM tags
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) RandomTag(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, randomTag)
	var name string
	err := row.Scan(&name)
	return name, err
}
